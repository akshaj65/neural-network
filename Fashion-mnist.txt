
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input,Dense
import numpy as np

#import datasets
from keras.datasets import fashion_mnist
data = fashion_mnist.load_data

(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()

import matplotlib.pyplot as plt

plt.subplot(221)
plt.imshow(X_train[0], cmap=plt.get_cmap('gray'))
plt.subplot(222)
plt.imshow(X_train[1], cmap=plt.get_cmap('gray'))
plt.subplot(223)
plt.imshow(X_train[2], cmap=plt.get_cmap('gray'))
plt.subplot(224)
plt.imshow(X_train[3], cmap=plt.get_cmap('gray'))
#show plot
plt.show()

X_train[0].shape

X_train= X_train.reshape((X_train.shape[0], 28*28)).astype('float32')
X_test= X_test.reshape((X_test.shape[0], 28*28)).astype('float32')

#normalizing valiues to 0-1 from 0-255
X_train = X_train / 255
X_test = X_test / 255

from keras.utils import np_utils

y_train= np_utils.to_categorical(y_train)
y_test= np_utils.to_categorical(y_test)
num_classes= y_test.shape[1]

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout

model = Sequential()
model.add(Dense(32, input_dim= 28*28, activation='relu'))
model.add(Dense(64,activation='relu'))
model.add(Dense(128,activation='relu'))
model.add(Dense(256,activation='relu'))
model.add(Dense(10,activation='softmax'))#output layer, 10= no. of classes

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.summary()

model.fit(X_train, y_train, validation_split=0.2, epochs=20,batch_size=200)

scores=model.evaluate(X_test, y_test)
print(scores)

predictions =model.predict(X_test)
label=[]
for pred in predictions:
  max_val=max(pred)
  for (i,p) in enumerate(pred):
    if(p==max_val):
      label.append(i)

plt.figure(figsize=(10,10))
plt.subplot(221)
plt.imshow(X_test[0].reshape(28,28), cmap=plt.get_cmap('gray'))
plt.title(f'Predicted: {label[0]}')
plt.subplot(222)
plt.imshow(X_test[1].reshape(28,28), cmap=plt.get_cmap('gray'))
plt.title(f'Predicted: {label[1]}')
plt.subplot(223)
plt.imshow(X_test[2].reshape(28,28), cmap=plt.get_cmap('gray'))
plt.title(f'Predicted: {label[2]}')
plt.subplot(224)
plt.imshow(X_test[3].reshape(28,28), cmap=plt.get_cmap('gray'))
plt.title(f'Predicted: {label[3]}')

plt.show()
